/**
 * ============================================================================
 * TEST CRITICAL DATA HEALTH CHECK
 * ============================================================================
 * Runs the health check immediately to test the notification system
 * ============================================================================
 */

require('dotenv').config();
const mongoose = require('mongoose');
const CriticalDataHealthCheck = require('../services/CriticalDataHealthCheck');

async function testHealthCheck() {
    try {
        console.log('üîå Connecting to MongoDB...');
        await mongoose.connect(process.env.MONGODB_URI);
        console.log('‚úÖ Connected to MongoDB');
        console.log('');
        
        console.log('üè• Running Critical Data Health Check...');
        console.log('');
        
        const results = await CriticalDataHealthCheck.runAllChecks();
        
        console.log('');
        console.log('‚ïê'.repeat(80));
        console.log('üìä HEALTH CHECK RESULTS');
        console.log('‚ïê'.repeat(80));
        console.log('');
        console.log(`‚è±Ô∏è  Timestamp: ${results.timestamp}`);
        console.log(`‚úÖ Passed: ${results.passed}`);
        console.log(`‚ùå Failed: ${results.failed}`);
        console.log(`‚ö†Ô∏è  Warnings: ${results.warnings}`);
        console.log('');
        console.log('CHECKS:');
        results.checks.forEach((check, i) => {
            const icon = check.status === 'PASS' ? '‚úÖ' : 
                        check.status === 'WARNING' ? '‚ö†Ô∏è' : 
                        check.status === 'CRITICAL' ? 'üî¥' : '‚ùå';
            console.log(`  ${i + 1}. ${icon} ${check.name}: ${check.status}`);
            if (check.issue) {
                console.log(`     Issue: ${check.issue}`);
            }
            if (check.impact) {
                console.log(`     Impact: ${check.impact}`);
            }
            if (check.count !== undefined) {
                console.log(`     Count: ${check.count}`);
            }
        });
        console.log('');
        console.log('‚ïê'.repeat(80));
        console.log('');
        
        if (results.failed > 0 || results.warnings > 0) {
            console.log('üö® ALERTS SENT TO NOTIFICATION CENTER!');
            console.log('');
            console.log('üìã NEXT STEPS:');
            console.log('   1. Check Notification Center tab for new alerts');
            console.log('   2. Review alert details and suggested fixes');
            console.log('   3. Fix critical issues immediately');
            console.log('');
        } else {
            console.log('üéâ ALL CHECKS PASSED! System is healthy.');
            console.log('');
        }
        
        process.exit(0);
    } catch (error) {
        console.error('‚ùå Health check failed:', error);
        process.exit(1);
    }
}

testHealthCheck();

